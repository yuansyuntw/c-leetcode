int resultCount;
int *resultSizes;
int **result;

int *gNums;
int gNumsSize;

int *copyArray(int *items, int size)
{
    int *new = (int *)calloc(gNumsSize, sizeof(int));
    for (int i = 0; i < size; i++)
    {
        new[i] = items[i];
    }
    return new;
}

void backtracking(int *temp, int size, int index)
{
    if (index == gNumsSize)
    {
        int *copytemp = copyArray(temp, size);
        result[resultCount] = copytemp;
        resultSizes[resultCount] = size;
        resultCount++;
        return;
    }

    temp[size] = gNums[index];
    int newSize = size + 1;
    backtracking(temp, newSize, index + 1);

    int newIndex = index + 1;
    while ((newIndex < gNumsSize) && (gNums[newIndex] == gNums[index]))
    {
        // If the new number equals the previous one, we skip it.
        newIndex++;
    }
    backtracking(temp, size, newIndex);
}

int cmpQSort(const void *left, const void *right)
{
    return ((*(int *)left) - (*(int *)right));
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int **subsetsWithDup(int *nums, int numsSize, int *returnSize, int **returnColumnSizes)
{
    qsort(nums, numsSize, sizeof(int), cmpQSort);

    result = (int **)calloc(1024, sizeof(int *));
    resultSizes = (int *)calloc(1024, sizeof(int));
    resultCount = 0;

    gNums = nums;
    gNumsSize = numsSize;

    int *temp = (int *)calloc(gNumsSize, sizeof(int));
    backtracking(temp, 0, 0);
    free(temp);

    *returnSize = resultCount;
    *returnColumnSizes = resultSizes;
    return result;
}